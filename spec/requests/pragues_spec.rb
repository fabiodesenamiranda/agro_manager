# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe("/pragues", type: :request) do
  # This should return the minimal set of attributes required to create a valid
  # Prague. As you add validations to Prague, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /index" do
    it "renders a successful response" do
      Prague.create!(valid_attributes)
      get pragues_url
      expect(response).to(be_successful)
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      prague = Prague.create!(valid_attributes)
      get prague_url(prague)
      expect(response).to(be_successful)
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_prague_url
      expect(response).to(be_successful)
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      prague = Prague.create!(valid_attributes)
      get edit_prague_url(prague)
      expect(response).to(be_successful)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Prague" do
        expect {
          post(pragues_url, params: { prague: valid_attributes })
        }.to(change(Prague, :count).by(1))
      end

      it "redirects to the created prague" do
        post pragues_url, params: { prague: valid_attributes }
        expect(response).to(redirect_to(prague_url(Prague.last)))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Prague" do
        expect {
          post(pragues_url, params: { prague: invalid_attributes })
        }.to(change(Prague, :count).by(0))
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post pragues_url, params: { prague: invalid_attributes }
        expect(response).to(have_http_status(:unprocessable_entity))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested prague" do
        prague = Prague.create!(valid_attributes)
        patch prague_url(prague), params: { prague: new_attributes }
        prague.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the prague" do
        prague = Prague.create!(valid_attributes)
        patch prague_url(prague), params: { prague: new_attributes }
        prague.reload
        expect(response).to(redirect_to(prague_url(prague)))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        prague = Prague.create!(valid_attributes)
        patch prague_url(prague), params: { prague: invalid_attributes }
        expect(response).to(have_http_status(:unprocessable_entity))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested prague" do
      prague = Prague.create!(valid_attributes)
      expect {
        delete(prague_url(prague))
      }.to(change(Prague, :count).by(-1))
    end

    it "redirects to the pragues list" do
      prague = Prague.create!(valid_attributes)
      delete prague_url(prague)
      expect(response).to(redirect_to(pragues_url))
    end
  end
end
